//
//  HealthPlanAI.swift
//  Wellnest
//
//  Created by junil on 8/5/25.
//

import Foundation
import Combine

extension AlanAIService {
    func generateHealthPlan(_ request: PlanRequest, userProfile: UserProfile = .default) {
        healthPlan = nil

        guard !clientID.isEmpty else {
            let calendar = Calendar.current
            let today = Date()
            let tomorrow = calendar.date(byAdding: .day, value: 1, to: today)!

            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd"

            let todayString = dateFormatter.string(from: today)
            let tomorrowString = dateFormatter.string(from: tomorrow)

            // ÏöîÏùº Îß§Ìïë (UIÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Ïù∏Îç±Ïä§ Ï≤¥Í≥ÑÏóê ÎßûÏ∂∞ Ï°∞Ï†ï)
            // UIÏóêÏÑú ÏõîÏöîÏùº=0, ÌôîÏöîÏùº=1, ... ÏùºÏöîÏùº=6 Ïù¥ÎùºÎ©¥:
            let weekdayNames = ["ÏùºÏöîÏùº", "ÏõîÏöîÏùº", "ÌôîÏöîÏùº", "ÏàòÏöîÏùº", "Î™©ÏöîÏùº", "Í∏àÏöîÏùº", "ÌÜ†ÏöîÏùº"]

            // ÎòêÎäî UIÏóêÏÑú ÏùºÏöîÏùº=0, ÏõîÏöîÏùº=1, ... ÌÜ†ÏöîÏùº=6 Ïù¥ÎùºÎ©¥ Í∏∞Ï°¥ Î∞∞Ïó¥ Ïú†ÏßÄ:
            //             let weekdayNames = ["ÏõîÏöîÏùº", "ÌôîÏöîÏùº", "ÏàòÏöîÏùº", "Î™©ÏöîÏùº", "Í∏àÏöîÏùº", "ÌÜ†ÏöîÏùº", "ÏùºÏöîÏùº"]

            var testSchedules: [AIScheduleItem] = []

            if request.planType == .routine {
                print("üîç Î£®Ìã¥ ÌÉÄÏûÖ - selectedWeekdays: \(request.selectedWeekdays)")

                // ÏÑ†ÌÉùÎêú ÏöîÏùºÎì§Î°ú Ïä§ÏºÄÏ§Ñ ÏÉùÏÑ±
                let selectedWeekdayNames = Array(request.selectedWeekdays).sorted().map { index in
                    let weekdayName = weekdayNames[index]
                    print("üîç Ïù∏Îç±Ïä§ \(index) -> \(weekdayName)")
                    return weekdayName
                }

                for (index, weekdayName) in selectedWeekdayNames.enumerated() {
                    let baseHour = 9 + (index * 2) // 9Ïãú, 11Ïãú, 13Ïãú, 15Ïãú Îì±ÏúºÎ°ú Î∂ÑÏÇ∞
                    let timeString = String(format: "%02d:00-%02d:00", baseHour, baseHour + 1)

                    testSchedules.append(
                        AIScheduleItem(
                            day: weekdayName,
                            date: nil,
                            time: timeString,
                            activity: "ÌÖåÏä§Ìä∏ Ïö¥Îèô \(index + 1) - \(request.preferences.first ?? "Í∏∞Î≥∏ Ïö¥Îèô")",
                            notes: "\(weekdayName) ÌÖåÏä§Ìä∏Ïö© Ïö¥ÎèôÏûÖÎãàÎã§."
                        )
                    )
                }

                // ÏöîÏùºÏù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í
                if testSchedules.isEmpty {
                    testSchedules.append(
                        AIScheduleItem(
                            day: "ÏõîÏöîÏùº",
                            date: nil,
                            time: "09:00-10:00",
                            activity: "ÌÖåÏä§Ìä∏ Ïö¥Îèô - \(request.preferences.first ?? "Í∏∞Î≥∏ Ïö¥Îèô")",
                            notes: "Í∏∞Î≥∏ ÌÖåÏä§Ìä∏Ïö© Ïö¥ÎèôÏûÖÎãàÎã§."
                        )
                    )
                }
            } else {
                // single, multiple ÌÉÄÏûÖÏùò Í≤ΩÏö∞ Í∏∞Ï°¥ Î°úÏßÅ
                testSchedules = [
                    AIScheduleItem(
                        day: nil,
                        date: todayString,
                        time: "09:00-10:00",
                        activity: "ÌÖåÏä§Ìä∏ Ïö¥Îèô - \(request.preferences.first ?? "Í∏∞Î≥∏ Ïö¥Îèô")",
                        notes: "ÌÖåÏä§Ìä∏Ïö© Ïö¥ÎèôÏûÖÎãàÎã§. Ïã§Ï†ú API Ïó∞Í≤∞ ÌõÑ Í∞úÏù∏ÎßûÏ∂§ Ïö¥ÎèôÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§."
                    )
                ]
            }

            let testPlan = HealthPlanResponse(
                planType: request.planType.rawValue,
                title: "ÌÖåÏä§Ìä∏ \(request.planType.displayName) ÌîåÎûú",
                description: "Client IDÍ∞Ä ÏóÜÏùÑ Îïå ÌëúÏãúÎêòÎäî ÌÖåÏä§Ìä∏ ÌîåÎûúÏûÖÎãàÎã§. API Ïó∞Í≤∞ ÌõÑ Ïã§Ï†ú ÌîåÎûúÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§.",
                schedules: testSchedules
            )

            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                self.isLoading = false
                self.healthPlan = testPlan

                print("==================================")
                print(self.healthPlan)
                print("==================================")

                print("ÌîåÎûú ÏÉùÏÑ± ÏÑ±Í≥µ")
            }
            return
        }

        let prompt = AlanPromptBuilder.buildPrompt(from: request, userProfile: userProfile)

        let healthPlanExtractor: (String) -> String? = { [weak self] response in
            if let data = response.data(using: .utf8),
               let outerJson = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
               let content = outerJson["content"] as? String {

                if let json = self?.extractJSONFromCodeBlock(content),
                   json.contains("plan_type") {
                    return json
                }

                if let json = self?.extractJSONByBraces(content),
                   json.contains("plan_type") {
                    return json
                }
            }

            if let json = self?.extractJSONByBraces(response),
               json.contains("plan_type") && json.contains("schedules") {
                return json
            }

            if let json = self?.extractJSONFromCodeBlock(response),
               json.contains("plan_type") {
                return json
            }

            if let json = self?.extractJSONByKeyword(response, keyword: "plan_type") {
                return json
            }

            return nil
        }

        self.request(prompt: prompt, responseType: HealthPlanResponse.self, jsonExtractor: healthPlanExtractor) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let healthPlan):
                    print("ÌîåÎûú ÏÉùÏÑ± ÏÑ±Í≥µ")
                    self?.healthPlan = healthPlan
                case .failure(let error):
                    print("ÌîåÎûú ÏÉùÏÑ± Ïã§Ìå®")
                    self?.errorMessage = error.localizedDescription
                }
            }
        }
    }
}
